{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ChartJS","register","LinearScale","CategoryScale","BarElement","PointElement","LineElement","Legend","Tooltip","App","useState","city","setCity","showtemp","setShowtemp","icon","setIcon","cityNname","setCityName","weatherDesc","setWeatherDesc","minTemp","setMinTemp","maxTemp","setMaxTemp","dateTimeline","setDateTimeline","averageTemp","setAverageTemp","d","Date","month","getMonth","dd","String","getDate","padStart","mm","lastmonth","getFullYear","thismonth","toISOString","split","day","getDay","urlApi","historyApi","useEffect","findCity","e","a","alert","Axios","get","undefined","resp","data","app_temp","weather","city_name","description","then","response","map","me","min_temp","max_temp","temp","datetime","console","log","catch","error","data_test","labels","datasets","type","label","borderColor","borderWidth","backgroundColor","className","tpye","value","onChange","target","onClick","src","options","tension","layout","padding","plugins","legend","font","size","scales","y","beginAtZero","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d347af82.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState, useEffect} from 'react'\nimport { AiOutlineSearch } from \"react-icons/ai\"\nimport { registerables } from 'chart.js';\n\nimport Axios from 'axios'\n\nimport {\n  Chart as ChartJS,\n  LinearScale,\n  CategoryScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Legend,\n  Tooltip,\n} from 'chart.js';\nimport { Chart } from 'react-chartjs-2';\n\nChartJS.register(\n  LinearScale,\n  CategoryScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Legend,\n  Tooltip\n);\n\n\nfunction App() {\n  \n  const[city, setCity] = useState('London')\n  const [showtemp,setShowtemp] = useState('')\n  const[icon, setIcon] = useState('')\n  const[cityNname, setCityName] = useState('')\n  const [weatherDesc, setWeatherDesc] = useState('')\n  const[minTemp, setMinTemp] = useState('')\n  const[maxTemp, setMaxTemp] = useState('')\n  const[dateTimeline, setDateTimeline] = useState('')\n  const [averageTemp, setAverageTemp] = useState()\n  const[todaysDate, setTodayDate] =useState('')\n  const[monthAgoDate, setMonthAgoDate] = useState('')\n \n//https://www.weatherbit.io/static/img/icons/r01d.png\n\nconst d = new Date();\nconst months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\nconst days = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\nlet month = months[d.getMonth()];\n\n\n\n//adding the dates\n\nvar dd = String(d.getDate()).padStart(2, '0');\nvar mm = String(d.getMonth()).padStart(2, '0'); //January is 0!\nvar yyyy = d.getFullYear();\nvar lastmonth = yyyy+'-'+ mm + '-' + dd\nvar thismonth =d.toISOString().split('T')[0]\n\n\n\n\n\n\n//average temp calc\n/*\nvar arrayMinMaxtemp = [[minTemp], [maxTemp]]\n var averagetemp = []\n\nfor(var i = 0; i < arrayMinMaxtemp[0].length; i++){\n  var num = 0;\n  //still assuming all arrays have the same amount of numbers\n  for(var i2 = 0; i2 < arrayMinMaxtemp.length; i2++){ \n    num += arrayMinMaxtemp[i2][i];\n  }\n  averagetemp.push(Math.round(num / arrayMinMaxtemp.length));\n}\n\n*/\n\nconst data = {\n  labels:['red', 'blue', 'yellow', 'green', 'purple', 'orange'],\n  datasets:[{\n    data:[12, 19, 3, 5, 2, 3]\n  }]\n\n}\n\n//const testmepls = [12.8, 8.9, 11.7, 11.7, 15, 21.7, 25, 25.6, 23.3, 21.7, 17.8, 13.9, 11.7, 18.9, 23.3, 23.9, 15.6, 11.7, 17.8, 13.3, 8.3, 11.1, 17.2, 12.2, 12.2, 16.1, 8.9, 15, 19.4, 22]\n\nlet day = days[d.getDay()];\n  var urlApi = `https://api.weatherbit.io/v2.0/current?city=${city}&key=a4f857b72d254de0bfa54acc93b31ce2`\n  var historyApi = `https://api.weatherbit.io/v2.0/history/daily?&city=${city}&start_date=${lastmonth}&end_date=${thismonth}&key=a4f857b72d254de0bfa54acc93b31ce2`\n\n  \n  const average_array_temp = []\n  const temp_array_value = []\n\n\n /*\n\n  const historyDataFunc= () =>{\n    \n    Axios.get(historyApi)\n  .then(function (response) {\n    // handle success\n    setMinTemp(response.data.data.map(me =>me.min_temp));\n    setMaxTemp(response.data.data.map(me =>me.max_temp));\n    setAverageTemp(response.data.data.map(me =>me.temp));\n    setDateTimeline(response.data.data.map(me =>me.datetime));\n    console.log(averageTemp)\n    \n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n\n  \n   }\n\n  \n  \n\n   for(var i = 0; i < temp_array_value[0].length; i++){\n    var num = 0;\n    //still assuming all arrays have the same amount of numbers\n    for(var i2 = 0; i2 < temp_array_value.length; i2++){ \n      num += temp_array_value[i2][i];\n    }\n    average_array_temp.push(Math.round(num / temp_array_value.length));\n  }\n  \n  console.log(average_array_temp);\n*/\n\n\n\n\n\n\n\n   ////!!!!\n   /// AFTER FINISHING AVERAGE TEMP COMMENT OUT BELOW \n\n   \n  useEffect(()=>{\n    findCity();\n   \n  }, [])\n  \n\n\n\n\n\n\n\n  const findCity = async (e) =>{\n    \n    if (city === \"\"){\n      alert(\"Please make enter the valid city name\")\n } \n else{\n\n  const resp = await Axios.get(urlApi)\n  if(resp.data.data === undefined){\n    alert('No such a city. Please check again')\n  }\n  else{\n    setShowtemp(resp.data.data[0].app_temp)\n    setIcon(resp.data.data[0].weather.icon)\n    setCityName(resp.data.data[0].city_name)\n    setWeatherDesc(resp.data.data[0].weather.description)\n    \n  }\n    \n  }\n\n  Axios.get(historyApi)\n  .then(function (response) {\n    // handle success\n    setMinTemp(response.data.data.map(me =>me.min_temp));\n    setMaxTemp(response.data.data.map(me =>me.max_temp));\n    setAverageTemp(response.data.data.map(me =>me.temp));\n    setDateTimeline(response.data.data.map(me =>me.datetime));\n    console.log(averageTemp)\n    \n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n\n}\n\n\nconst mee = {backgroundColor: 'rgb(75, 192, 192)'}\n\n\n\n\nconst options = {\n  \n  tension: 0.35,\n  layout: {\n    padding: 40\n},\n  plugins:{\n    legend: {\n      labels:{\n        font:{\n          size: 18\n        }\n      }\n    }\n  },\n  scales: {\n    y: {\n      beginAtZero: true,\n    },\n  },\n\n\n};\n\n\n\n// const labels = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\", \"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\n\nconst labels = dateTimeline\n\nconst data_test = {\n  labels,\n  datasets: [\n    {\n     \n      type: 'line',\n      label: 'Average Temp in â„ƒ',\n      borderColor: 'rgb(255, 99, 132)',\n      borderWidth: 2,\n      data: averageTemp,\n    },\n    {\n      type: 'bar',\n      label: 'Max Temp in â„ƒ',\n      backgroundColor: 'rgb(53, 162, 235)',\n      data: minTemp,\n      borderColor: 'white',\n      borderWidth: 2,\n    },\n    {\n      type: 'bar',\n      label: 'Min Temp in â„ƒ',\n      backgroundColor: 'rgb(75, 192, 192)',\n      data: maxTemp,\n    },\n\n  ],\n};\n\n\n  return (\n    <div className=\"App\">\n       <div className=\"main\">\n\n      { /*  <button onClick={historyDataFunc}> CLick me  </button> */}\n          <div className=\"title\"> Weather App </div>\n          <div className=\"search_bar\"> \n           \n           <input tpye=\"text\" value={city} onChange={e =>setCity(e.target.value)} className=\"search_input\"></input>\n           <button onClick={(e) => findCity(e)} className='search_btn'><AiOutlineSearch /> </button>\n\n          \n           \n           </div>\n          \n          <div className=\"curent_city\">\n         \n          <div className=\"current_date\"> <h3>  {day  } {\"  \"} {d.getDate()}, {month}  <br /> <br /> Today in {cityNname} </h3> </div>\n          <div className=\"weather_icon\"> \n          {icon? <img className=\"icon_img\" src={`https://www.weatherbit.io/static/img/icons/${icon}.png`} /> : <img className=\"icon_img\" src={`https://www.weatherbit.io/static/img/icons/r01d.png`} />}\n          \n          <img className=\"icon_img\"/> <h4 className=\"title_weather\"> {weatherDesc} </h4></div>\n          <div className=\"weather_temp\"> <h1> {showtemp} {'   '} &#8451;</h1>  </div>\n        \n        \n        \n        \n        \n         {/* <div className=\"contenet-wether\"> <h1> 32 {showcity}</h1> </div> */}\n        {/*<div className='icon'> {icon ? <img src={`https://www.weatherbit.io/static/img/icons/${icon}.png`} /> : <img src={`https://www.weatherbit.io/static/img/icons/r01d.png`} />} </div> */} \n          </div>\n          \n          <div className=\"chart\">\n  {/*    <Line \n        data={{\n          labels: testme,\n          datasets: [\n            \n            {\n              label: 'New Data set',\n              data: [2, 10, 5, 5, 6, 7, 5, 4, 7, 5, 2, 3, -2, 19, 13, 5, 2, 3, 12, 14, 14, 7, 2, 3, 12, 12, -3, 5, 2, 3],\n              borderColor: 'rgba(255,204,1)',\n              fill: 'green',\n              borderWidth: 3,\n              backgroundColor: 'rgba(255,245,211)',\n  \n              fill:'start'\n            },\n\n          ],\n        }}\n        height={600}\n        width={420}\n        options={{\n          maintainAspectRatio: false,\n          scales:{\n            yAxes:[\n              {\n                ticks:{\n                  beginAtZero: true\n                }\n              }\n            ]\n          }\n        }}\n      />\n      */}\n  <h1>Weather History of {cityNname} city</h1>\n<Chart type='bar' data={data_test} options={options} className=\"weather_Chart\"/>\n\n          </div>\n         \n       </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}