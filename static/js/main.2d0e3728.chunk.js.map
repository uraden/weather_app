{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ChartJS","register","registerablesJS","LinearScale","CategoryScale","BarElement","PointElement","LineElement","Legend","Tooltip","App","useState","city","setCity","showtemp","setShowtemp","icon","setIcon","cityNname","setCityName","weatherDesc","setWeatherDesc","minTemp","setMinTemp","maxTemp","setMaxTemp","dateTimeline","setDateTimeline","averageTemp","setAverageTemp","d","Date","month","getMonth","dd","String","getDate","padStart","mm","lastmonth","getFullYear","thismonth","toISOString","split","day","getDay","urlApi","process","historyApi","useEffect","findCity","e","a","alert","Axios","get","undefined","resp","data","app_temp","weather","city_name","description","then","response","map","me","min_temp","max_temp","temp","datetime","catch","error","console","log","data_test","labels","datasets","type","label","borderColor","borderWidth","backgroundColor","className","tpye","value","onChange","target","onKeyPress","key","onClick","src","options","animations","tension","duration","easing","from","to","loop","layout","padding","plugins","legend","font","size","scales","y","beginAtZero","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d0e3728.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport Axios from \"axios\";\n\n\nimport {\n  Chart as ChartJS,\n  LinearScale,\n  CategoryScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Legend,\n  Tooltip,\n  registerables as registerablesJS\n} from \"chart.js\";\nimport { Chart} from \"react-chartjs-2\";\nChartJS.register(...registerablesJS);\n\n\n\nChartJS.register(\n  LinearScale,\n  CategoryScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Legend,\n  Tooltip\n);\n\n\n\n\nfunction App() {\n  const [city, setCity] = useState(\"London\");\n  const [showtemp, setShowtemp] = useState(\"\");\n  const [icon, setIcon] = useState(\"\");\n  const [cityNname, setCityName] = useState(\"\");\n  const [weatherDesc, setWeatherDesc] = useState(\"\");\n  const [minTemp, setMinTemp] = useState(\"\");\n  const [maxTemp, setMaxTemp] = useState(\"\");\n  const [dateTimeline, setDateTimeline] = useState(\"\");\n  const [averageTemp, setAverageTemp] = useState();\n\n  //https://www.weatherbit.io/static/img/icons/r01d.png\n  \n\n  const d = new Date();\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n  let month = months[d.getMonth()];\n\n\n\n\n\n  //adding the dates\n\n  var dd = String(d.getDate()).padStart(2, \"0\");\n  var mm = String(d.getMonth()).padStart(2, \"0\"); //January is 0!\n  var yyyy = d.getFullYear();\n  var lastmonth = yyyy + \"-\" + mm + \"-\" + dd;\n  var thismonth = d.toISOString().split(\"T\")[0];\n\n  //average temp calc\n\n\n  const data = {\n    labels: [\"red\", \"blue\", \"yellow\", \"green\", \"purple\", \"orange\"],\n    datasets: [\n      {\n        data: [12, 19, 3, 5, 2, 3],\n      },\n    ],\n  };\n\n  //const testmepls = [12.8, 8.9, 11.7, 11.7, 15, 21.7, 25, 25.6, 23.3, 21.7, 17.8, 13.9, 11.7, 18.9, 23.3, 23.9, 15.6, 11.7, 17.8, 13.3, 8.3, 11.1, 17.2, 12.2, 12.2, 16.1, 8.9, 15, 19.4, 22]\n\n  let day = days[d.getDay()];\n  var urlApi = `https://api.weatherbit.io/v2.0/current?city=${city}&key=${process.env.REACT_APP_WEATHER_API_KEY}`;\n  var historyApi = `https://api.weatherbit.io/v2.0/history/daily?&city=${city}&start_date=${lastmonth}&end_date=${thismonth}&key=${process.env.REACT_APP_WEATHER_API_KEY}`;\n\n \n\n  /// AFTER FINISHING AVERAGE TEMP COMMENT OUT BELOW\n\n  useEffect(() => {\n    findCity();\n  }, []);\n\n  const findCity = async (e) => {\n    if (city === \"\") {\n      alert(\"Please make enter the valid city name\");\n    } else {\n      const resp = await Axios.get(urlApi);\n      if (resp.data.data === undefined) {\n        alert(\"No such a city. Please check again\");\n      } else {\n        setShowtemp(resp.data.data[0].app_temp);\n        setIcon(resp.data.data[0].weather.icon);\n        setCityName(resp.data.data[0].city_name);\n        setWeatherDesc(resp.data.data[0].weather.description);\n      }\n    }\n\n    Axios.get(historyApi)\n      .then(function (response) {\n        // handle success\n        setMinTemp(response.data.data.map((me) => me.min_temp));\n        setMaxTemp(response.data.data.map((me) => me.max_temp));\n        setAverageTemp(response.data.data.map((me) => me.temp));\n        setDateTimeline(response.data.data.map((me) => me.datetime));\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n  };\n\n  \n\n  const options = {\n    animations: {\n      tension: {\n        duration: 1000,\n        easing: \"linear\",\n        from: 0,\n        to: 0.45,\n        loop: false,\n      },\n    },\n\n    layout: {\n      padding: 40,\n    },\n    plugins: {\n      legend: {\n        labels: {\n          font: {\n            size: 18,\n          },\n        },\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n      },\n    },\n  };\n\n  // const labels = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\", \"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\n\n  const labels = dateTimeline;\n\n  const data_test = {\n    labels,\n    datasets: [\n      {\n        type: \"line\",\n        label: \"Average Temp in ℃\",\n        borderColor: \"rgb(255, 99, 132)\",\n        borderWidth: 2,\n        data: averageTemp,\n      },\n      {\n        type: \"bar\",\n        label: \"Min Temp in ℃\",\n        backgroundColor: \"rgb(53, 162, 235)\",\n        data: minTemp,\n        borderColor: \"white\",\n        borderWidth: 2,\n      },\n      {\n        type: \"bar\",\n        label: \"Max Temp in ℃\",\n        backgroundColor: \"rgb(75, 192, 192)\",\n        data: maxTemp,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"main\">\n        {/*  <button onClick={historyDataFunc}> CLick me  </button> */}\n        <div className=\"title\"> Weather App </div>\n        <div className=\"search_bar\">\n          \n          <input\n            tpye=\"text\"\n            value={city}\n            onChange={(e) => setCity(e.target.value)}\n            className=\"search_input\"\n            onKeyPress={(e) => e.key === 'Enter' && findCity()}\n          ></input>\n          <button onClick={(e) => findCity(e) }   \n          className=\"search_btn\">\n            <AiOutlineSearch />{\" \"}\n          </button>\n          \n        </div>\n\n        <div className=\"curent_city\">\n          <div className=\"current_date\">\n            {\" \"}\n            <h3>\n              {\" \"}\n              {day} {\"  \"} {d.getDate()}, {month} <br /> <br /> Today in{\" \"}\n              {cityNname}{\" \"}\n            </h3>{\" \"}\n          </div>\n          <div className=\"weather_icon\">\n            {icon ? (\n              <img\n                className=\"icon_img\"\n                src={`https://www.weatherbit.io/static/img/icons/${icon}.png`}\n              />\n            ) : (\n              <img\n                className=\"icon_img\"\n                src={`https://www.weatherbit.io/static/img/icons/r01d.png`}\n              />\n            )}\n            <img className=\"icon_img\" />{\" \"}\n            <h4 className=\"title_weather\"> {weatherDesc} </h4>\n          </div>\n          <div className=\"weather_temp\">\n            {\" \"}\n            <h1>\n              {\" \"}\n              {showtemp} {\"   \"} &#8451;\n            </h1>{\" \"}\n          </div>\n\n          {/* <div className=\"contenet-wether\"> <h1> 32 {showcity}</h1> </div> */}\n          {/*<div className='icon'> {icon ? <img src={`https://www.weatherbit.io/static/img/icons/${icon}.png`} /> : <img src={`https://www.weatherbit.io/static/img/icons/r01d.png`} />} </div> */}\n        </div>\n\n        <div className=\"chart\">\n          <h1>Weather History of {cityNname} city</h1>\n          <Chart\n            type=\"bar\"\n            data={data_test}\n            options={options}\n            className=\"weather_Chart\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}